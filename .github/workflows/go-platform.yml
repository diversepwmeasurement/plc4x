env:
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
  PLC4X_TEST_HIGH_TEST_LOG_PRECISION: ${{ github.event.inputs.highLogPrecision }}
  PLC4X_TEST_PASS_LOGGER_TO_MODEL: ${{ github.event.inputs.passLoggerToModel }}
  PLC4X_TEST_RECEIVE_TIMEOUT_MS: ${{ github.event.inputs.receiveTimeout }}
  PLC4X_TEST_TEST_TRANSPORT_INSTANCE: ${{ github.event.inputs.traceTestTransportInstance
    }}
  PLC4X_TEST_TRACE_DEFAULT_MESSAGE_CODEC_WORKER: ${{ github.event.inputs.traceDefaultMessageCodecWorker
    }}
  PLC4X_TEST_TRACE_EXECUTOR_WORKERS: ${{ github.event.inputs.traceExecutorWorkers
    }}
  PLC4X_TEST_TRACE_TRANSACTION_MANAGER_TRANSACTIONS: ${{ github.event.inputs.traceTransactionManagerTransactions
    }}
  PLC4X_TEST_TRACE_TRANSACTION_MANAGER_WORKERS: ${{ github.event.inputs.traceTransactionManagerWorkers
    }}
jobs:
  test:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Install libpcap for Linux
      run: sudo apt-get install libpcap-dev
    - continue-on-error: true
      if: matrix.os == 'macos-latest'
      name: Install libpcap for macos
      run: brew install libpcap
    - continue-on-error: true
      if: matrix.os == 'windows-latest'
      name: Install libpcap for windows
      run: choco install -y nmap
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: adopt
        java-package: jdk
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-

          '
    - continue-on-error: true
      env:
        OS: ${{ matrix.os }}
      id: platform_opts
      name: Set Platform options
      uses: actions/github-script@v7.0.1
      with:
        script: "const { OS } = process.env\nif (OS.includes(\"windows\")) {\n  core.setOutput('platform_opts',\
          \ ``)\n} else if (OS.includes(\"macos\")) {\n  core.setOutput('platform_opts',\
          \ `-Djna.library.path=\"$(find /usr/local/Cellar/libpcap/ -name lib)\"`)\n\
          } else if (OS.includes(\"ubuntu\")) {\n  core.setOutput('platform_opts',\
          \ ``)\n} else {\n  core.setOutput('platform_opts', ``)\n}\n"
    - continue-on-error: true
      env:
        OS: ${{ matrix.os }}
      id: platform_suffix
      name: Calculate platform suffix
      uses: actions/github-script@v7.0.1
      with:
        script: "const { OS } = process.env\nif (OS.includes(\"windows\")) {\n  core.setOutput('platform_suffix',\
          \ `.cmd`)\n} else {\n  core.setOutput('platform_suffix', ``)\n}\n"
    - continue-on-error: true
      env:
        FORCE_UPDATE: ${{ github.event.inputs.forceUpdates }}
      id: extra_options
      name: Set extra options
      uses: actions/github-script@v7.0.1
      with:
        script: "const { FORCE_UPDATE } = process.env\nif (FORCE_UPDATE.includes(\"\
          true\")) {\n  core.setOutput('extra_options', `-U`)\n} else {\n  core.setOutput('extra_options',\
          \ ``)\n}\n"
    - continue-on-error: true
      name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go
    - continue-on-error: true
      if: matrix.os == 'windows-latest'
      name: Check LongPathsEnabled on Windows
      run: '(Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled

        '
    - continue-on-error: true
      name: Run mvnw
      run: './mvnw${{ steps.platform_suffix.outputs.platform_suffix }} ${{ steps.extra_options.outputs.extra_options
        }} -B -P''with-go,enable-all-checks,update-generated-code'' -pl :plc4go -am
        ${{ steps.platform_opts.outputs.platform_opts }} install

        '
    - continue-on-error: true
      if: failure()
      name: Upload Test Report (first failure)
      uses: actions/upload-artifact@v4
      with:
        name: golang-test-report-first-failure-${{ matrix.os }}
        path: '**/surefire-reports/go-junit-report.xml

          **/reports/test-out-verbose.log

          '
    - continue-on-error: true
      if: ${{ failure() }}
      name: Run mvnv without BacNet regression tests
      run: ./mvnw${{ steps.platform_suffix.outputs.platform_suffix }} ${{ steps.extra_options.outputs.extra_options
        }} -B -P'with-go,skip-bacnet-regression-test,update-generated-code' -pl :plc4go
        -am ${{ steps.platform_opts.outputs.platform_opts }} install
    - continue-on-error: true
      if: success() || failure()
      name: Upload Test Report
      uses: actions/upload-artifact@v4
      with:
        name: golang-test-report-${{ matrix.os }}
        path: '**/surefire-reports/go-junit-report.xml

          **/reports/test-out-verbose.log

          '
    - continue-on-error: true
      name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    strategy:
      fail-fast: false
      matrix:
        java:
        - 17
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
name: Go Platform compatibility
on:
  repository_dispatch:
    types: trigger-ga___go-platform.yml
