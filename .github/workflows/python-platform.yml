env:
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
jobs:
  test:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      if: matrix.os == 'ubuntu-latest'
      name: Install libpcap for Linux
      run: sudo apt-get install libpcap-dev
    - continue-on-error: true
      if: matrix.os == 'macos-latest'
      name: Install libpcap for macos
      run: brew install libpcap
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - continue-on-error: true
      name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: adopt
        java-package: jdk
        java-version: 17
    - continue-on-error: true
      env:
        OS: ${{ matrix.os }}
      id: platform_opts
      name: Set Platform options
      uses: actions/github-script@v7.0.1
      with:
        script: "const { OS } = process.env\nif (OS.includes(\"windows\")) {\n  core.setOutput('platform_opts',\
          \ ``)\n} else if (OS.includes(\"macos\")) {\n  core.setOutput('platform_opts',\
          \ `-Djna.library.path=\"$(find /usr/local/Cellar/libpcap/ -name lib)\"`)\n\
          } else if (OS.includes(\"ubuntu\")) {\n  core.setOutput('platform_opts',\
          \ ``)\n} else {\n  core.setOutput('platform_opts', ``)\n}\n"
    - continue-on-error: true
      env:
        OS: ${{ matrix.os }}
      id: platform_suffix
      name: Calculate platform suffix
      uses: actions/github-script@v7.0.1
      with:
        script: "const { OS } = process.env\nif (OS.includes(\"windows\")) {\n  core.setOutput('platform_suffix',\
          \ `.cmd`)\n} else {\n  core.setOutput('platform_suffix', ``)\n}\n"
    - continue-on-error: true
      env:
        FORCE_UPDATE: ${{ github.event.inputs.forceUpdates }}
      id: extra_options
      name: Set extra options
      uses: actions/github-script@v7.0.1
      with:
        script: "const { FORCE_UPDATE } = process.env\nif (FORCE_UPDATE.includes(\"\
          true\")) {\n  core.setOutput('extra_options', `-U`)\n} else {\n  core.setOutput('extra_options',\
          \ ``)\n}\n"
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        path: ~/.m2/repository
        restore-keys: "${{ runner.os }}-maven-   \n"
    - continue-on-error: true
      name: Install dependencies
      run: "python -m pip install --upgrade pip\npip install flake8 pytest       \
        \   \n"
    - continue-on-error: true
      name: Run mvnw
      run: './mvnw${{ steps.platform_suffix.outputs.platform_suffix }} ${{ steps.extra_options.outputs.extra_options
        }} -B -P''with-python,enable-all-checks,update-generated-code'' -pl :plc4py
        -am ${{ steps.platform_opts.outputs.platform_opts }} install

        '
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        python-version:
        - '3.7'
        - '3.8'
        - '3.9'
        - '3.10'
        - '3.11'
name: Python Platform Compatibility
on:
  repository_dispatch:
    types: trigger-ga___python-platform.yml
permissions:
  contents: read
